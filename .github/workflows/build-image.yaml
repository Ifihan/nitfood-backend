name: Nitfood deployment

on:
  push:
    branches:
      - "hotfix"
  pull_request:
    branches:
      - "main"

env:
  AWS_REGION: us-east-1                       
  ECR_REPOSITORY: ecotrack         # set this to your Amazon ECR repository name
  ECS_SERVICE: hcd-ecoTrack-service                # set this to your Amazon ECS service name
  ECS_CLUSTER: hcd-ecoTrack-cluster               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ecs-task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:  ecotrack-backend-test         # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  FORCE_COLOR: 3
  REGISTRY_ALIAS: f3h4y9u1

jobs:
  develop:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: yarn

      # - name: Run tests
      #   run: yarn test --coverage

  main:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.pull_request.base.ref == 'main'
    needs: ['develop']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: ${{ env.REGISTRY_ALIAS }} 
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          
          docker build -t $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT 
          
      - name: Fill in the new image ID in the Amazon ECS task definition 
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true